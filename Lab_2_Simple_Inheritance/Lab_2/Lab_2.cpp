#include <iostream>
#include <iomanip>
#include "Person.h"
#include "Professor.h"
#include "HeadOfDepartment.h"
#include "Student.h"

using namespace std;
/*1. Для определения иерархии классов связать отношением
наследования классы, приведенные в приложении (для заданного варианта). Из
перечисленных классов выбрать один, который будет стоять во главе
иерархии. Это абстрактный класс.
2. Определить в классах все необходимые конструкторы и деструктор.
3. Компонентные данные класса специфицировать как protected.
4. Пример определения статических компонентов:
static person* begin; // указатель на начало списка
static void print(void); // просмотр списка
5. Статическую компоненту-данное инициализировать вне определения
класса, в глобальной области.
6. Для добавления объекта в список предусмотреть метод класса, т.е.
объект сам добавляет себя в список. Например, a.Add() − объект a добавляет
себя в список.
Включение объекта в список можно выполнять при создании объекта,
т.е. поместить операторы включения в конструктор. В случае иерархии
классов, включение объекта в список должен выполнять только конструктор
базового класса. Вы должны продемонстрировать оба этих способа.
7. Список просматривать путем вызова виртуального метода Show
каждого объекта.
8. Статический метод просмотра списка вызывать не через объект, а
через класс.
9. Определение классов, их реализацию, демонстрационную программу
поместить в отдельные файлы.*/
//5. Студент, преподаватель, персона, заведующий кафедрой.

Node* Person::begin = new Node;

int main()
{
    Professor p("George Washington");
    Person::begin->object = &p;
    Person::begin->next = NULL;

    Person* per;
    Professor pr("John Smith");
    per = &pr;
    per->Show();
    HeadOfDepartment hod("Chris Clark", true); //добавление в список в конструкторе
    per = &hod;
    per->Show();
    cout << "------------------------------------------" << endl;
    pr.Add();
    Person* h = new Student("Leonid Elcin", true);
    Student s1 = Student("Grigoriy Sinicin", true);    
    Person::Print();
    cout << "----=-=-=-=-=-=--=-=-=-=-=-=-=-=----" << endl;
    delete h;
    s1.Show();

    return 0;
}
